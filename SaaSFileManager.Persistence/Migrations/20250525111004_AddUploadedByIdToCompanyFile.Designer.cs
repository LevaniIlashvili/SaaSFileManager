// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SaaSFileManager.Persistence;

#nullable disable

namespace SaaSFileManager.Persistence.Migrations
{
    [DbContext(typeof(FileManagerDbContext))]
    [Migration("20250525111004_AddUploadedByIdToCompanyFile")]
    partial class AddUploadedByIdToCompanyFile
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SaaSFileManager.Domain.Entities.BillingRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AmountDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BillingPeriod")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CompanySubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalEmployeesThisMonth")
                        .HasColumnType("int");

                    b.Property<int>("TotalFilesUploadedThisMonth")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanySubscriptionId");

                    b.ToTable("BillingRecords");
                });

            modelBuilder.Entity("SaaSFileManager.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActivationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompanySubscriptionPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("SaaSFileManager.Domain.Entities.CompanyFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRestricted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UploadedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyFiles");
                });

            modelBuilder.Entity("SaaSFileManager.Domain.Entities.CompanyFileAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CompanyFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyFileId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FileId");

                    b.ToTable("FileAccesses");
                });

            modelBuilder.Entity("SaaSFileManager.Domain.Entities.CompanySubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SubscribedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubscriptionPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique()
                        .HasFilter("CanceledAt IS NULL");

                    b.HasIndex("SubscriptionPlanId");

                    b.ToTable("CompanySubscriptions");
                });

            modelBuilder.Entity("SaaSFileManager.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActivationToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("SaaSFileManager.Domain.Entities.SubscriptionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowExtraFiles")
                        .HasColumnType("bit");

                    b.Property<int>("FileLimitPerMonth")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PricePerExtraFile")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PricePerUser")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("StartingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UserLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlans");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6523feb5-b2e5-44f0-86b1-f3029a966310"),
                            AllowExtraFiles = false,
                            FileLimitPerMonth = 10,
                            Name = "Free",
                            PricePerUser = 0m,
                            StartingPrice = 0m,
                            UserLimit = 1
                        },
                        new
                        {
                            Id = new Guid("12455643-90a2-4477-9aaa-fa212163bb5f"),
                            AllowExtraFiles = false,
                            FileLimitPerMonth = 100,
                            Name = "Basic",
                            PricePerUser = 5m,
                            StartingPrice = 0m,
                            UserLimit = 10
                        },
                        new
                        {
                            Id = new Guid("3ea029f3-bdd3-4ca4-9331-78f269d0d742"),
                            AllowExtraFiles = true,
                            FileLimitPerMonth = 1000,
                            Name = "Premium",
                            PricePerExtraFile = 0.5m,
                            PricePerUser = 0m,
                            StartingPrice = 300m
                        });
                });

            modelBuilder.Entity("SaaSFileManager.Domain.Entities.BillingRecord", b =>
                {
                    b.HasOne("SaaSFileManager.Domain.Entities.CompanySubscription", "CompanySubscription")
                        .WithMany("BillingRecords")
                        .HasForeignKey("CompanySubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanySubscription");
                });

            modelBuilder.Entity("SaaSFileManager.Domain.Entities.CompanyFile", b =>
                {
                    b.HasOne("SaaSFileManager.Domain.Entities.Company", "Company")
                        .WithMany("Files")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SaaSFileManager.Domain.Entities.CompanyFileAccess", b =>
                {
                    b.HasOne("SaaSFileManager.Domain.Entities.CompanyFile", null)
                        .WithMany("FileAccesses")
                        .HasForeignKey("CompanyFileId");

                    b.HasOne("SaaSFileManager.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SaaSFileManager.Domain.Entities.CompanyFile", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("File");
                });

            modelBuilder.Entity("SaaSFileManager.Domain.Entities.CompanySubscription", b =>
                {
                    b.HasOne("SaaSFileManager.Domain.Entities.Company", "Company")
                        .WithOne("CompanySubscription")
                        .HasForeignKey("SaaSFileManager.Domain.Entities.CompanySubscription", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaaSFileManager.Domain.Entities.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany()
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("SaaSFileManager.Domain.Entities.Employee", b =>
                {
                    b.HasOne("SaaSFileManager.Domain.Entities.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SaaSFileManager.Domain.Entities.Company", b =>
                {
                    b.Navigation("CompanySubscription");

                    b.Navigation("Employees");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("SaaSFileManager.Domain.Entities.CompanyFile", b =>
                {
                    b.Navigation("FileAccesses");
                });

            modelBuilder.Entity("SaaSFileManager.Domain.Entities.CompanySubscription", b =>
                {
                    b.Navigation("BillingRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
